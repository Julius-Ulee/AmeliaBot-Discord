"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// index.ts
var soundcloud_exports = {};
__export(soundcloud_exports, {
  SearchType: () => SearchType,
  SoundCloudPlugin: () => SoundCloudPlugin,
  default: () => soundcloud_default
});
module.exports = __toCommonJS(soundcloud_exports);
var import_soundcloud = __toESM(require("soundcloud.ts"));
var import_distube = require("distube");
var SC = new import_soundcloud.default();
var isTruthy = /* @__PURE__ */ __name((x) => Boolean(x), "isTruthy");
var SearchType = /* @__PURE__ */ ((SearchType2) => {
  SearchType2["Track"] = "track";
  SearchType2["Playlist"] = "playlist";
  return SearchType2;
})(SearchType || {});
var _sc;
var _SoundCloudPlugin = class extends import_distube.ExtractorPlugin {
  constructor(options = {}) {
    super();
    __privateAdd(this, _sc, void 0);
    if (typeof options !== "object" || Array.isArray(options)) {
      throw new import_distube.DisTubeError("INVALID_TYPE", ["object", "undefined"], options, "SoundCloudPluginOptions");
    }
    (0, import_distube.checkInvalidKey)(options, ["clientId", "oauthToken"], "SoundCloudPluginOptions");
    if (options.clientId && typeof options.clientId !== "string") {
      throw new import_distube.DisTubeError("INVALID_TYPE", "string", options.clientId, "clientId");
    }
    if (options.oauthToken && typeof options.oauthToken !== "string") {
      throw new import_distube.DisTubeError("INVALID_TYPE", "string", options.oauthToken, "oauthToken");
    }
    __privateSet(this, _sc, new import_soundcloud.default(options?.clientId, options?.oauthToken));
  }
  static async search(query, type = "track" /* Track */, limit = 10) {
    if (typeof query !== "string") {
      throw new import_distube.DisTubeError("INVALID_TYPE", "string", query, "query");
    }
    if (!Object.values(SearchType).includes(type)) {
      throw new import_distube.DisTubeError("INVALID_TYPE", Object.values(SearchType), type, "type");
    }
    if (typeof limit !== "number" || limit < 1 || !Number.isInteger(limit)) {
      throw new import_distube.DisTubeError("INVALID_TYPE", "natural number", limit, "limit");
    }
    switch (type) {
      case "track" /* Track */: {
        const data = await SC.tracks.searchV2({ q: query, limit });
        if (!data?.collection?.length) {
          throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_NO_RESULT", `Cannot find any "${query}" ${type} on SoundCloud!`);
        }
        return data.collection.map((t) => new import_distube.Song(new SoundCloudTrack(t)));
      }
      case "playlist" /* Playlist */: {
        const data = await SC.playlists.searchV2({ q: query, limit });
        const playlists = data.collection;
        return (await Promise.all(playlists.map(async (p) => new import_distube.Playlist(new SoundCloudPlaylist(await SC.playlists.fetch(p)))))).filter(isTruthy);
      }
      default:
        throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_UNSUPPORTED_TYPE", `${type} search is not supported!`);
    }
  }
  search(query, type = "track" /* Track */, limit = 10) {
    return _SoundCloudPlugin.search(query, type, limit);
  }
  async validate(url) {
    return /^https?:\/\/(?:(?:www|m)\.)?soundcloud\.com\/(.*)$/.test(url);
  }
  async resolve(url, options) {
    const opt = { ...options, source: "soundcloud" };
    url = url.replace(/:\/\/(m|www)\./g, "://");
    const data = await __privateGet(this, _sc).resolve.getV2(url, true).catch(() => void 0);
    if (!data || !["track", "playlist"].includes(data.kind)) {
      throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_NOT_SUPPORTED", "Only public links are supported.");
    }
    return data.kind === "playlist" ? new import_distube.Playlist(new SoundCloudPlaylist(await __privateGet(this, _sc).playlists.fetch(data)), opt) : new import_distube.Song(new SoundCloudTrack(data), opt);
  }
  async getRelatedSongs(url) {
    const related = await __privateGet(this, _sc).tracks.relatedV2(url, 10);
    return related.filter((t) => t.title).map((t) => new import_distube.Song(new SoundCloudTrack(t)));
  }
  async getStreamURL(url) {
    const stream = await __privateGet(this, _sc).util.streamLink(url);
    if (!stream) {
      throw new import_distube.DisTubeError(
        "SOUNDCLOUD_PLUGIN_RATE_LIMITED",
        "Reached SoundCloud rate limits\nSee more: https://developers.soundcloud.com/docs/api/rate-limits#play-requests"
      );
    }
    return stream;
  }
};
var SoundCloudPlugin = _SoundCloudPlugin;
__name(SoundCloudPlugin, "SoundCloudPlugin");
_sc = new WeakMap();
var SoundCloudTrack = class {
  constructor(info) {
    __publicField(this, "src");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "url");
    __publicField(this, "thumbnail");
    __publicField(this, "duration");
    __publicField(this, "views");
    __publicField(this, "reposts");
    __publicField(this, "uploader");
    __publicField(this, "uploader_url");
    this.src = "soundcloud";
    this.id = info.id.toString();
    this.name = info.title;
    this.url = info.permalink_url;
    this.thumbnail = info.artwork_url;
    this.duration = info.duration / 1e3;
    this.views = info.playback_count;
    this.reposts = info.reposts_count;
    this.uploader = info.user?.username;
    this.uploader_url = info.user?.permalink_url;
  }
};
__name(SoundCloudTrack, "SoundCloudTrack");
var SoundCloudPlaylist = class {
  constructor(info) {
    __publicField(this, "source");
    __publicField(this, "songs");
    __publicField(this, "id");
    __publicField(this, "name");
    __publicField(this, "url");
    __publicField(this, "thumbnail");
    this.source = "soundcloud";
    this.id = info.id;
    this.name = info.title;
    this.url = info.permalink_url;
    this.thumbnail = info.artwork_url ?? void 0;
    if (!info.tracks?.length)
      throw new import_distube.DisTubeError("SOUNDCLOUD_PLUGIN_EMPTY_PLAYLIST", "Playlist is empty.");
    this.songs = info.tracks.map((s) => new import_distube.Song(new SoundCloudTrack(s)));
  }
};
__name(SoundCloudPlaylist, "SoundCloudPlaylist");
var soundcloud_default = SoundCloudPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SearchType,
  SoundCloudPlugin
});
//# sourceMappingURL=index.js.map